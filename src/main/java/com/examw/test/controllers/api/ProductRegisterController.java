package com.examw.test.controllers.api;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.examw.model.Json;
import com.examw.test.service.products.IProductRegisterService;
import com.examw.test.service.products.IProductRegisterService.ProductRegister;
import com.examw.test.service.products.IRegistrationBindingService;
import com.examw.test.service.products.IRegistrationCodeService;

/**
 * 产品注册控制器
 * 
 * @author fengwei.
 * @since 2015年1月12日 上午11:18:37.
 */
@Controller
@RequestMapping(value = { "/api/register" })
public class ProductRegisterController {
	private static final Logger logger = Logger.getLogger(ProductRegisterController.class);
	//注入产品注册服务接口。
	@Resource
	private IProductRegisterService productRegisterService;
	@Resource
	private IRegistrationCodeService registrationService;
	@Resource
	private IRegistrationBindingService registrationBindingService;
	/**
	 * 注册码注册绑定
	 * @param code
	 * @return
	 */
	@RequestMapping(value = {"/register"}, method = {RequestMethod.POST })
	@ResponseBody
	public Json register(@RequestBody ProductRegister data) {
		if(logger.isDebugEnabled()) logger.debug(String.format("注册码注册:%s", data));
		Json result = new Json();
		try{
			result.setSuccess(this.registrationBindingService.addBinding(data));
			result.setMsg("注册成功");
		}catch(Exception e){
			e.printStackTrace();
			result.setSuccess(false);
			result.setMsg(e.getMessage());
		}
		return result;
	}
	/**
	 * 验证注册码[数据同步时调用]
	 * @param code
	 * @param userId
	 * @param productId
	 * @param machine
	 * @param terminalCode
	 * @return
	 */
	@RequestMapping(value = {"/verify"}, method = {RequestMethod.GET,RequestMethod.POST})
	@ResponseBody
	public Json verify(@RequestBody ProductRegister data)
	{
		if(logger.isDebugEnabled()) logger.debug("注册码验证");
		Json result = new Json();
		try{
			result.setSuccess(this.productRegisterService.verify(data));
			result.setMsg("验证通过");
		}catch(Exception e){
			result.setSuccess(false);
			result.setMsg(e.getMessage());
		}
		return result;
	}
	
	/**
	 * 自动生成注册码
	 * @param productId
	 * @param channelId
	 * @param limit
	 * @return
	 */
	@RequestMapping(value = {"/generate"}, method = {RequestMethod.GET,RequestMethod.POST})
	@ResponseBody
	public Json generateCode(String productId,String channelId,Integer limit)
	{
		if(logger.isDebugEnabled()) logger.debug(String.format("生成注册码,productId=[%1$s],channelId=[%2$s],期限=[%3$d]",productId,channelId,limit));
		Json result = new Json();
		try{
			result.setSuccess(true);
			result.setData(this.registrationService.autoGeneratedCode(productId, channelId, limit));
			result.setMsg("生成成功");
		}catch(Exception e){
			e.printStackTrace();
			result.setSuccess(false);
			result.setMsg(e.getMessage());
		}
		return result;
	}
}
